# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    noreply_mail: '%env(NO_REPLY_MAIL)%'
    email_link_host: '%env(MAIL_LINK_HOST)%'
    upload_directory: '%env(UPLOAD_DIRECTORY)%'
    searching_radius_m: '%env(SEARCHING_RADIUS_M)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    app.service.mailer:
        class: App\Service\Mailer
        arguments:
            - '@swiftmailer.mailer.default'
            - '@templating.engine.twig'
            - '%noreply_mail%'
            - '%email_link_host%'

    App\Service\EntityManager\UserManager:
        calls:
            - method: setMailer
              arguments:
                  - '@app.service.mailer'

    app.filter.configurator:
        class: App\Service\DoctrineFilter\Configurator
        arguments:
            - '@doctrine.orm.entity_manager'
        calls:
            - method: setTokenStorage
              arguments:
                  - '@security.token_storage'
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    app.video_link.manager:
        class: App\Service\Video\VideoLinkManager

    App\Service\Video\IExternalVideoProvider: '@App\Service\Video\ExternalVideoProvider'

    App\Service\Geo\IGeoLocationService: '@App\Service\Geo\GeoLocationService'

    app.complaint_tag.manager:
        class: App\Service\EntityManager\Client\ComplaintTagManager

    App\Validator\Constraints\Client\ComplaintPictureOwnerValidator:
        tags:
            - { name: validator.constraint_validator }

    App\Validator\Constraints\Client\IssuePictureOwnerValidator:
        tags:
            - { name: validator.constraint_validator }

    App\Validator\Constraints\Client\VideoOwnerValidator:
        tags:
            - { name: validator.constraint_validator }

    App\Validator\Constraints\Client\IssueComplaintMaxDistanceValidator:
        calls:
            - method: setMaxDistance
              arguments:
                  - '%searching_radius_m%'
        tags:
            - { name: validator.constraint_validator }

    App\Service\EntityManager\Client\VideoMaterialManager:
        calls:
            - method: setTokenStorage
              arguments:
                  - '@security.token_storage'
            - method: setLinkManager
              arguments:
                  - '@app.video_link.manager'
            - method: setExternalVideoProvider
              arguments:
                  - '@App\Service\Video\IExternalVideoProvider'

    App\Service\EntityManager\Client\ComplaintManager:
        calls:
            - method: setTokenStorage
              arguments:
                  - '@security.token_storage'

            - method: setGeoLocationService
              argument:
                  - '@App\Service\Geo\IGeoLocationService'

            - method: setTagManager
              arguments:
                  - '@app.complaint_tag.manager'

    App\Event\Subscriber\ComplaintPictureSerializeSubscriber:
        arguments:
            - '@vich_uploader.templating.helper.uploader_helper'
            - '@liip_imagine.cache.manager'
        public: true
        tags: [jms_serializer.event_subscriber]

    App\Event\Subscriber\IssuePictureSerializeSubscriber:
        arguments:
            - '@vich_uploader.templating.helper.uploader_helper'
            - '@liip_imagine.cache.manager'
        public: true
        tags: [jms_serializer.event_subscriber]

    Jsor\Doctrine\PostGIS\Event\ORMSchemaEventSubscriber:
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    App\Repository\ComplaintRepository:
        calls:
            - method: setSearchingRadius
              arguments:
                  - '%searching_radius_m%'

    App\Event\Subscriber\ComplaintConfirmationSubscriber:
        tags:
            - { name: doctrine.event_subscriber, connection: default }



